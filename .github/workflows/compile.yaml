name: Gulp CI/CD Workflow
on:
  push:
    branches:
      - main
      - master
permissions:
  contents: write
  pages: write
  id-token: write
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 20
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
          
      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: 1.4.549
          
      - name: Set up Pandoc
        uses: r-lib/actions/setup-pandoc@v2
          
      - name: Install Dependencies
        run: npm install gulp gulp-cli @rollup/plugin-babel @rollup/plugin-commonjs @rollup/plugin-node-resolve @rollup/plugin-terser gulp-zip gulp-header-comment gulp-eslint gulp-clean-css gulp-connect gulp-autoprefixer sass through2 yargs glob node-qunit-puppeteer decktape
          
      - name: Build Project
        run: |
          npx gulp css
          npx gulp js
          npx gulp plugins

      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
      - name: Run Tests
        run: npm test
        env:
          CI: true
          PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable
          
      - name: Render Presentations
        run: |
          # Find all presentation source files
          for file in *.{md,qmd}; do
            if [ -f "$file" ] && [ "$file" != "README.md" ] && [ "$file" != "CONTRIBUTING.md" ] && [ "$file" != "LICENSE.md" ]; then
              basename="${file%.*}"
              mkdir -p "presentations/$basename"
              
              # Copy source file to presentations directory
              cp "$file" "presentations/$basename/"
              
              # Navigate to presentation directory and render
              cd "presentations/$basename"
              echo "Rendering $file in $(pwd)..."
              quarto render "$file" --to revealjs
              cd - >/dev/null
            fi
          done
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  generate-pdfs:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Decktape
        run: npm install -g decktape

      - name: Generate PDFs and Screenshots
        env:
          REPO_NAME: ${{ github.repository }}
        run: |
          # Wait for GitHub Pages deployment
          sleep 60
          
          # Process each presentation
          for dir in presentations/*/; do
            dir="${dir%/}"
            pres=$(basename "$dir")
            url="https://${{ github.repository_owner }}.github.io/${REPO_NAME#*/}/presentations/$pres/$pres.html"
            
            echo "Processing presentation at $url"
            
            # Generate PDF
            mkdir -p "$dir/pdf"
            decktape reveal --chrome-arg="--no-sandbox" --size 1920x1080 "$url" "$dir/pdf/$pres.pdf"
            
            # Generate screenshots
            mkdir -p "$dir/png"
            decktape reveal --chrome-arg="--no-sandbox" --size 1920x1080 "$url" "$dir/temp.pdf" --screenshots --screenshots-directory "$dir/png"
            
            # Rename screenshots
            cd "$dir/png"
            count=1
            for f in temp_*_1920x1080.png; do
              if [ -f "$f" ]; then
                newname=$(printf "%s_slide_%03d.png" "$pres" "$count")
                mv "$f" "$newname"
                count=$((count+1))
              fi
            done
            cd - >/dev/null
            rm -f "$dir/temp.pdf"
          done

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Add generated PDFs and screenshots" || echo "No changes to commit"
          git pull --rebase
          git push || echo "No changes to push"
