name: Gulp CI/CD Workflow
on:
  push:
    branches:
      - main
      - master
permissions:
  contents: write
  pages: write
  id-token: write
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 20
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
          
      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: 1.4.549
          
      - name: Set up Pandoc
        uses: r-lib/actions/setup-pandoc@v2
          
      - name: Install Dependencies
        run: |
          npm install gulp
          npm install gulp-cli
          npm install @rollup/plugin-babel @rollup/plugin-commonjs @rollup/plugin-node-resolve @rollup/plugin-terser
          npm install gulp-zip gulp-header-comment gulp-eslint gulp-clean-css gulp-connect gulp-autoprefixer
          npm install sass
          npm install through2
          npm install yargs
          npm install glob
          npm install node-qunit-puppeteer
          npm install decktape
          
      - name: Build Project
        run: |
          npx gulp css
          npx gulp js
          npx gulp plugins

      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
      - name: Run Tests
        run: npm test
        env:
          CI: true
          
      - name: Render Markdown and Quarto Files
        run: |
          for file in *.md; do
            if [ -f "$file" ] && [ "$file" != "README.md" ] && [ "$file" != "CONTRIBUTING.md" ] && [ "$file" != "LICENSE.md" ]; then
              echo "Processing $file..."
              if ! quarto render "$file" --to revealjs; then
                echo "Warning: Failed to process $file, skipping..."
                continue
              fi
            fi
          done
          for file in *.qmd; do
            if [ -f "$file" ]; then
              echo "Processing $file..."
              if ! quarto render "$file" --to revealjs; then
                echo "Warning: Failed to process $file, skipping..."
                continue
              fi
            fi
          done
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: .
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Create .webloc file
        run: |
          echo '<?xml version="1.0" encoding="UTF-8"?>' > presentation.webloc
          echo '<plist version="1.0">' >> presentation.webloc
          echo '<dict>' >> presentation.webloc
          echo '	<key>URL</key>' >> presentation.webloc
          echo '	<string>${{ steps.deployment.outputs.page_url }}</string>' >> presentation.webloc
          echo '</dict>' >> presentation.webloc
          echo '</plist>' >> presentation.webloc
        env:
          PAGE_URL: ${{ steps.deployment.outputs.page_url }}

  generate-pdfs:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Decktape
        run: npm install -g decktape

      - name: Create output directories
        run: |
          mkdir -p pdfs
          mkdir -p pngs

      - name: Get modified HTML files
        id: changed-files
        run: |
          # Get all changed files
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          
          # Build list of HTML files to process
          HTML_TO_PROCESS=""
          for file in $CHANGED_FILES; do
            if [[ "$file" =~ \.(md|qmd)$ ]]; then
              # For .md/.qmd files, add corresponding .html
              basename="${file%.*}"
              if [[ -f "${basename}.html" ]]; then
                HTML_TO_PROCESS+="${basename}.html "
              fi
            elif [[ "$file" =~ \.html$ ]]; then
              # For .html files, add directly
              HTML_TO_PROCESS+="$file "
            fi
          done
          
          # Remove trailing space and set output
          HTML_TO_PROCESS="${HTML_TO_PROCESS% }"
          echo "files=${HTML_TO_PROCESS}" >> $GITHUB_OUTPUT

      - name: Generate PDFs and Screenshots
        env:
          REPO_NAME: ${{ github.repository }}
        run: |
          # Wait for GitHub Pages to be ready
          sleep 60

          # Read the changed files
          CHANGED_FILES="${{ steps.changed-files.outputs.files }}"
          
          for file in $CHANGED_FILES; do
            if [[ -f "$file" && "$file" == *.html ]]; then
              filename=$(basename "$file" .html)
              url="https://${{ github.repository_owner }}.github.io/${REPO_NAME#*/}/$file"
              
              echo "Processing $url"
              
              # Generate PDF with 1920x1080 resolution
              decktape reveal --size 1920x1080 "$url" "pdfs/${filename}.pdf"
              
              # Generate screenshots with 1920x1080 resolution and custom naming
              mkdir -p "pngs/$filename"
              decktape reveal --size 1920x1080 "$url" "temp.pdf" --screenshots --screenshots-directory "pngs/$filename"
              
              # Rename screenshot files
              cd "pngs/$filename"
              for f in temp_*_1920x1080.png; do
                num=$(echo $f | sed 's/temp_\([0-9]*\)_1920x1080.png/\1/')
                mv "$f" "slide_$(printf %02d $num)_1920x1080.png"
              done
              cd ../..
              rm temp.pdf
            fi
          done

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          if [[ -n "$(git status --porcelain pdfs/ pngs/)" ]]; then
            git add pdfs/ pngs/
            git commit -m "Add generated PDFs and screenshots"
            git pull --rebase
            git push
          else
            echo "No changes to commit"
          fi
