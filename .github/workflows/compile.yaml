name: Gulp CI/CD Workflow
on:
  push:
    branches:
      - main
      - master
permissions:
  contents: write
  pages: write
  id-token: write
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 20
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
          
      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: 1.4.549
          
      - name: Set up Pandoc
        uses: r-lib/actions/setup-pandoc@v2
          
      - name: Install Dependencies
        run: |
          npm install gulp
          npm install gulp-cli
          npm install @rollup/plugin-babel @rollup/plugin-commonjs @rollup/plugin-node-resolve @rollup/plugin-terser
          npm install gulp-zip gulp-header-comment gulp-eslint gulp-clean-css gulp-connect gulp-autoprefixer
          npm install sass
          npm install through2
          npm install yargs
          npm install glob
          npm install node-qunit-puppeteer
          npm install decktape
          
      - name: Build Project
        run: |
          npx gulp css
          npx gulp js
          npx gulp plugins

      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
      - name: Run Tests
        run: npm test
        env:
          CI: true
          PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable
          
      - name: Organize and Render Presentations
        run: |
          # Move .md/.qmd files to presentations/<base>/
          for file in $(find . -maxdepth 1 -type f \( -iname "*.md" -o -iname "*.qmd" \) \
            ! -iname "README.md" ! -iname "CONTRIBUTING.md" ! -iname "LICENSE.md"); do
            file="${file#./}"
            base="$(basename "$file" | sed 's/\.[^.]*$//')"
            mkdir -p "presentations/$base"
            mv "$file" "presentations/$base/"
          done

          # Render each .md/.qmd into revealjs inside its presentation folder
          for dir in presentations/*/; do
            cd "$dir"
            for src in *.{md,qmd}; do
              if [ -f "$src" ]; then
                echo "Rendering $src in $(pwd)..."
                basefolder="$(basename "$(pwd)")"
                quarto render "$src" --to revealjs --output "${basefolder}.html"
              fi
            done
            cd - >/dev/null
          done
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Create .webloc file
        run: |
          echo '<?xml version="1.0" encoding="UTF-8"?>' > presentation.webloc
          echo '<plist version="1.0">' >> presentation.webloc
          echo '<dict>' >> presentation.webloc
          echo '	<key>URL</key>' >> presentation.webloc
          echo '	<string>${{ steps.deployment.outputs.page_url }}</string>' >> presentation.webloc
          echo '</dict>' >> presentation.webloc
          echo '</plist>' >> presentation.webloc
        env:
          PAGE_URL: ${{ steps.deployment.outputs.page_url }}

  generate-pdfs:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Decktape
        run: npm install -g decktape

      - name: Generate PDFs and Screenshots
        env:
          REPO_NAME: ${{ github.repository }}
        run: |
          sleep 60
          for dir in presentations/*/; do
            pres="$(basename "$dir")"
            # Skip certain folders
            if [ "$pres" = "demo" ] || [ "$pres" = "index" ]; then
              echo "Skipping folder '$pres'..."
              continue
            fi

            htmlfile="$dir/${pres}.html"
            if [ -f "$htmlfile" ]; then
              url="https://${{ github.repository_owner }}.github.io/${REPO_NAME#*/}/presentations/${pres}/${pres}.html"
              echo "Generating PDF/PNGs for '$pres' from $url..."
              
              pdf_dir="$dir/pdf"
              png_dir="$dir/png"
              mkdir -p "$pdf_dir" "$png_dir"

              decktape reveal --chrome-arg="--no-sandbox" --size 1920x1080 "$url" "$pdf_dir/${pres}.pdf"

              decktape reveal --chrome-arg="--no-sandbox" --size 1920x1080 "$url" "temp.pdf" --screenshots --screenshots-directory "$png_dir"

              cd "$png_dir"
              count=1
              for f in temp_*_1920x1080.png; do
                newname=$(printf "${pres}_slide_%03d_1920x1080.png" "$count")
                mv "$f" "$newname"
                count=$((count+1))
              done
              cd - >/dev/null
              rm temp.pdf
            else
              echo "No HTML file named '${pres}.html' in $dir, skipping..."
            fi
          done

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          if [[ -n "$(git status --porcelain presentations/)" ]]; then
            git add presentations/
            git commit -m "Add generated PDFs and screenshots"
            git pull --rebase
            git push
          else
            echo "No changes to commit"
